{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///home/erivaldo-dev/www/RepoInsight/src/database/prisma.client.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\n\nconst globalForPrisma = global as unknown as { prisma: PrismaClient };\n\nexport const prisma = globalForPrisma.prisma || new PrismaClient();\n\nif (process.env.NODE_ENV !== \"production\") globalForPrisma.prisma = prisma;\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAEjB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;AAEhE,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 74, "column": 0}, "map": {"version":3,"sources":["file:///home/erivaldo-dev/www/RepoInsight/src/lib/env.config.ts"],"sourcesContent":["import { z } from \"zod\";\n\nconst envSchema = z.object({\n    DATABASE_URL: z.string().url(),\n    OLLAMA_API: z.string().url(),\n    GITHUB_CLIENT_ID: z.string(), // numeros e letras\n    GITHUB_CLIENT_SECRET: z.string(), // numeros e letras\n    NEXTAUTH_SECRET: z.string(), // numeros e letras\n    NEXTAUTH_URL: z.string().url()\n});\n\nexport const env = envSchema.parse(process.env);"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,YAAY,sIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACvB,cAAc,sIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG;IAC5B,YAAY,sIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG;IAC1B,kBAAkB,sIAAA,CAAA,IAAC,CAAC,MAAM;IAC1B,sBAAsB,sIAAA,CAAA,IAAC,CAAC,MAAM;IAC9B,iBAAiB,sIAAA,CAAA,IAAC,CAAC,MAAM;IACzB,cAAc,sIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG;AAChC;AAEO,MAAM,MAAM,UAAU,KAAK,CAAC,QAAQ,GAAG","debugId":null}},
    {"offset": {"line": 88, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 198, "column": 0}, "map": {"version":3,"sources":["file:///home/erivaldo-dev/www/RepoInsight/src/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import { prisma } from \"@/database/prisma.client\";\nimport { env } from \"@/lib/env.config\";\nimport GitHubProvider from \"next-auth/providers/github\";\nimport NextAuth from \"next-auth\";\nimport { PrismaAdapter } from \"@auth/prisma-adapter\";\nimport type { NextAuthOptions } from \"next-auth\";\n\nimport CredentialsProvider from \"next-auth/providers/credentials\";\nimport bcrypt from \"bcrypt\";\n\nexport const authOptions: NextAuthOptions = {\n    adapter: PrismaAdapter(prisma),\n    providers: [\n        GitHubProvider({\n            clientId: env.GITHUB_CLIENT_ID,\n            clientSecret: env.GITHUB_CLIENT_SECRET,\n        }),\n        CredentialsProvider({\n            name: \"Credentials\",\n            credentials: {\n                email: { label: \"Email\", type: \"email\" },\n                password: { label: \"Password\", type: \"password\" },\n            },\n            async authorize(credentials) {\n                if (!credentials?.email || !credentials?.password) {\n                    throw new Error(\"Email e senha são obrigatórios!\");\n                }\n\n                const user = await prisma.user.findUnique({\n                    where: { email: credentials.email },\n                });\n\n                if (!user || !user.password) {\n                    throw new Error(\"Usuário não encontrado ou senha inválida!\");\n                }\n\n                const isValid = await bcrypt.compare(credentials.password, user.password);\n                if (!isValid) {\n                    throw new Error(\"Senha incorreta!\");\n                }\n\n                return {\n                    id: user.id,\n                    name: user.name,\n                    email: user.email,\n                    company: user.company,\n                    role: user.role,\n                    image: user.image,\n                    subscription: user.subscription,\n                };\n            },\n        }),\n    ],\n};\n\n\nconst handler = NextAuth(authOptions);\nexport { handler as GET, handler as POST };\n"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;;;;;;;;AAEO,MAAM,cAA+B;IACxC,SAAS,CAAA,GAAA,sJAAA,CAAA,gBAAa,AAAD,EAAE,qIAAA,CAAA,SAAM;IAC7B,WAAW;QACP,CAAA,GAAA,qJAAA,CAAA,UAAc,AAAD,EAAE;YACX,UAAU,6HAAA,CAAA,MAAG,CAAC,gBAAgB;YAC9B,cAAc,6HAAA,CAAA,MAAG,CAAC,oBAAoB;QAC1C;QACA,CAAA,GAAA,0JAAA,CAAA,UAAmB,AAAD,EAAE;YAChB,MAAM;YACN,aAAa;gBACT,OAAO;oBAAE,OAAO;oBAAS,MAAM;gBAAQ;gBACvC,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YACpD;YACA,MAAM,WAAU,WAAW;gBACvB,IAAI,CAAC,aAAa,SAAS,CAAC,aAAa,UAAU;oBAC/C,MAAM,IAAI,MAAM;gBACpB;gBAEA,MAAM,OAAO,MAAM,qIAAA,CAAA,SAAM,CAAC,IAAI,CAAC,UAAU,CAAC;oBACtC,OAAO;wBAAE,OAAO,YAAY,KAAK;oBAAC;gBACtC;gBAEA,IAAI,CAAC,QAAQ,CAAC,KAAK,QAAQ,EAAE;oBACzB,MAAM,IAAI,MAAM;gBACpB;gBAEA,MAAM,UAAU,MAAM,qGAAA,CAAA,UAAM,CAAC,OAAO,CAAC,YAAY,QAAQ,EAAE,KAAK,QAAQ;gBACxE,IAAI,CAAC,SAAS;oBACV,MAAM,IAAI,MAAM;gBACpB;gBAEA,OAAO;oBACH,IAAI,KAAK,EAAE;oBACX,MAAM,KAAK,IAAI;oBACf,OAAO,KAAK,KAAK;oBACjB,SAAS,KAAK,OAAO;oBACrB,MAAM,KAAK,IAAI;oBACf,OAAO,KAAK,KAAK;oBACjB,cAAc,KAAK,YAAY;gBACnC;YACJ;QACJ;KACH;AACL;AAGA,MAAM,UAAU,CAAA,GAAA,uIAAA,CAAA,UAAQ,AAAD,EAAE","debugId":null}},
    {"offset": {"line": 267, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}